VERBOSE: False
BASE_TASK_CONFIG_PATH: configs/tasks/rearrange/rearrange_easy.yaml
TRAINER_NAME: "ppo"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: ["disk"]
TENSORBOARD_DIR: "tb"
VIDEO_DIR: "video_dir/easy_online_1"
VIDEO_FPS: 30
VIDEO_RENDER_TOP_DOWN: False
VIDEO_RENDER_ALL_INFO: True
VIDEO_RENDER_VIEWS:
  - "THIRD_RGB_SENSOR"
TEST_EPISODE_COUNT: -1
EVAL_CKPT_PATH_DIR: "data/easy_online_1"
NUM_ENVIRONMENTS: 16
WRITER_TYPE: 'tb'
# Visual sensors to include
SENSORS: ["HEAD_DEPTH_SENSOR"]
CHECKPOINT_FOLDER: "data/easy_online_1"
NUM_UPDATES: -1
TOTAL_NUM_STEPS: 1.0e8
LOG_INTERVAL: 10
NUM_CHECKPOINTS: 20
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True
EVAL_KEYS_TO_INCLUDE_IN_NAME: ['reward', 'force', 'success']

RL:
  POLICY:
      name: "TransformerResNetPolicy"
      action_distribution_type: "mixed"
      ACTION_DIST:
        discrete_arm: false
        discrete_base: false
        use_std_param: true
        temperature: 1.0
      use_rgb: false
      offline: false
      include_visual_keys: ["robot_head_depth"]
      train_planner: true
      train_control: true
      temperature: 1.0
  TRANSFORMER:
    return_to_go: 100
    context_length: 30
    model_type: "bc"
    n_head: 8
    n_layer: 2
    freeze_layer: [] #
    reg_flags: 
      outer_dropout: false
      outer_layernorm: true
      attention_dropout: false
      attention_layernorm: true
      feedforward_dropout: false
      feedforward_layernorm: true
    hidden_size: 512
    backbone: resnet18

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.0002
    lr: 1e-5
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    value_func_warmup: 1
    warmup_updates: 500

    use_normalized_advantage: False

    hidden_size: 512

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ckpts/easy_offline_4/ckpt.12.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet18
    rnn_type: LSTM
    num_recurrent_layers: 2
